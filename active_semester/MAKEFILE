# Main Makefile
# ============

# Root directory definitions
SRC_DIR := src
BUILD_DIR := build
LOG_DIR := logs
PDF_DIR := pdfs
COMMON_DIR := $(SRC_DIR)/common

# Parallel compilation
MAKEFLAGS += --jobs=$(shell nproc)

# Compiler settings
LATEXMK_FLAGS := -interaction=nonstopmode -shell-escape -pdf

# List of modules (automatically detected)
MODULES := $(notdir $(wildcard $(SRC_DIR)/HAX*))

# Default target
all: $(MODULES)

# Module-specific rules
define module_rules
# Args: $(1) - module name

# Standard main file names
$(1)_COURS_MAIN := chapter_main.tex
$(1)_TDS_MAIN := td_main.tex

# Define source files
$(1)_COURS_SRC := $$(wildcard $(SRC_DIR)/$(1)/cours/$$($(1)_COURS_MAIN))
$(1)_TDS_SRC := $$(wildcard $(SRC_DIR)/$(1)/tds/$$($(1)_TDS_MAIN))

# Define dependencies
$(1)_DEPS := $$(wildcard $(SRC_DIR)/$(1)/assets/*.tex) \
             $$(wildcard $(SRC_DIR)/$(1)/assets/*/*.tex) \
             $$(wildcard $(SRC_DIR)/$(1)/cours/*.tex) \
             $$(wildcard $(SRC_DIR)/$(1)/tds/*.tex) \
             $(COMMON_DIR)/*.tex

# Module target
$(1): $$(if $$($(1)_COURS_SRC),$(PDF_DIR)/$(1)/cours/$$(basename $$(notdir $$($(1)_COURS_MAIN))).pdf) \
      $$(if $$($(1)_TDS_SRC),$(PDF_DIR)/$(1)/tds/$$(basename $$(notdir $$($(1)_TDS_MAIN))).pdf)

# PDF generation rules
$(PDF_DIR)/$(1)/cours/%.pdf: $(BUILD_DIR)/$(1)/cours/%.pdf
	@mkdir -p $$(dir $$@)
	@cp $$< $$@

$(PDF_DIR)/$(1)/tds/%.pdf: $(BUILD_DIR)/$(1)/tds/%.pdf
	@mkdir -p $$(dir $$@)
	@cp $$< $$@

# Build rules
$(BUILD_DIR)/$(1)/cours/%.pdf: $(SRC_DIR)/$(1)/cours/$$($(1)_COURS_MAIN) $$($(1)_DEPS)
	@mkdir -p $$(dir $$@) $(LOG_DIR)/$(1)
	@echo "Compiling $$<..."
	@cd $$(dir $$<) && latexmk $(LATEXMK_FLAGS) --output-directory=$(CURDIR)/$$(dir $$@) $$(notdir $$<) \
		> $(CURDIR)/$(LOG_DIR)/$(1)/$$(notdir $$(basename $$<)).log 2>&1
	@if [ "$(MAKECMDGOALS)" != "log" ]; then rm -f $(CURDIR)/$(LOG_DIR)/$(1)/$$(notdir $$(basename $$<)).log; fi

$(BUILD_DIR)/$(1)/tds/%.pdf: $(SRC_DIR)/$(1)/tds/$$($(1)_TDS_MAIN) $$($(1)_DEPS)
	@mkdir -p $$(dir $$@) $(LOG_DIR)/$(1)
	@echo "Compiling $$<..."
	@cd $$(dir $$<) && latexmk $(LATEXMK_FLAGS) --output-directory=$(CURDIR)/$$(dir $$@) $$(notdir $$<) \
		> $(CURDIR)/$(LOG_DIR)/$(1)/$$(notdir $$(basename $$<)).log 2>&1
	@if [ "$(MAKECMDGOALS)" != "log" ]; then rm -f $(CURDIR)/$(LOG_DIR)/$(1)/$$(notdir $$(basename $$<)).log; fi

# Clean rule
clean-$(1):
	rm -rf $(BUILD_DIR)/$(1)
	rm -rf $(LOG_DIR)/$(1)
	rm -f $$(PDF_DIR)/$(1)/cours/cours_main.pdf
	rm -f $(PDF_DIR)/$(1)/tds/td_main.pdf

endef

# Generate rules for each module
$(foreach mod,$(MODULES),$(eval $(call module_rules,$(mod))))

# Number-based targets (e.g., make 601)
$(foreach mod,$(MODULES),$(eval $(shell echo $(mod) | grep -o '6[0-9][0-9]'): $(mod)))

# Number-based clean targets (e.g., make clean-601)
$(foreach mod,$(MODULES),$(eval clean-$(shell echo $(mod) | grep -o '6[0-9][0-9]'): clean-$(mod)))

# Clean everything
clean: $(foreach mod,$(MODULES),clean-$(mod))
	@echo "All build files and logs have been cleaned."

log: all
	@echo "Logs have been generated."

help:
	@echo "Available targets:"
	@echo "  all                 - Build all modules"
	@echo "  <module_name>       - Build a specific module (e.g., HAX501)"
	@echo "  <module_number>     - Build a specific module by number (e.g., 501)"
	@echo "  clean               - Clean all build files and logs"
	@echo "  clean-<module_name> - Clean a specific module (e.g., clean-HAX501)"
	@echo "  clean-<number>      - Clean a specific module by number (e.g., clean-501)"
	@echo "  log                 - Build all modules and keep log files"

watch:
	@while true; do \
		make all; \
		inotifywait -qre close_write $(SRC_DIR); \
	done

.PHONY: all clean log help watch $(MODULES) $(foreach mod,$(MODULES),clean-$(mod))